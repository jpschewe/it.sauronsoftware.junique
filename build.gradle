// -*- java -*-

plugins {
    id "java-library"
    id "maven-publish"
}

def publishProps = new Properties()
File publishPropertiesFile = project.file("../publish.properties")
if(publishPropertiesFile.exists()) {
    publishPropertiesFile.withInputStream { publishProps.load(it) }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://repo.mtu.net/releases"
    }
}

dependencies {
  testImplementation(group: "junit", name: "junit", version: "3.8.1")
}

group = "it.sauronsoftware"
version = "1.0.5"
description = "it.sauronsoftware.junique"

java {
    // set version of Java that the source confirms to. 
    // The bytecode will be for this version of Java as well, unless targetCompatibility is specified.
    sourceCompatibility = JavaVersion.VERSION_11
    
    withSourcesJar()
    withJavadocJar()
}


def pomConfig = {
    licenses {
        license {
            name "GPL 2.1"
            url "https://opensource.org/licenses/lgpl-2.1.php"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jspchewe"
            name "Jon Schewe"
            email "jpschewe@mtu.net"
        }
    }

    scm {
        url "https://github.com/jpschewe/it.sauronsoftware.junique"
    }
}
  
publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode("description", """The JUnique library can be used to prevent a user to run at the same time more instances of the same Java application.
        JUnique implements locks and communication channels shared between all the JVM instances launched by the same user. 
        See the documentation for more details.
        for of http://www.sauronsoftware.it/projects/junique/""")
                root.appendNode("name", "it.sauronsoftware.junique")
                root.appendNode("url", "https://github.com/jpschewe/it.sauronsoftware.junique")
                root.children().last() + pomConfig
            }
        }
        
        mavenJava(MavenPublication) {
            from components.java
        }        
    }
 
    repositories {
        mavenLocal()
        maven {
          def releasesRepoUrl = "https://repo.mtu.net/releases/"
          def snapshotsRepoUrl = "https://repo.mtu.net/snapshots/"
          url = version.contains("beta") ? snapshotsRepoUrl : releasesRepoUrl
          
          credentials {
            username publishProps.getProperty("repo.user")
            password publishProps.getProperty("repo.key")
          }
          authentication {
            basic(BasicAuthentication)
          }          
        }
    }
}
